version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - ecom-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - ecom-network

  # Consul for service discovery
  consul:
    image: hashicorp/consul:1.17
    container_name: consul
    ports:
      - "8500:8500"
    command: consul agent -server -bootstrap-expect=1 -ui -client=0.0.0.0 -bind=0.0.0.0 -data-dir=/consul/data
    volumes:
      - consul_data:/consul/data
    networks:
      - ecom-network

  # User Service
  user-service:
    build:
      context: .
      dockerfile: user_service/Dockerfile
    container_name: user-service
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: 123postgres
      DB_NAME: user_service
      DB_SSLMODE: disable
      CONSUL_ADDR: consul:8500
    depends_on:
      postgres:
        condition: service_healthy
      consul:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - ecom-network
    restart: on-failure

  # Product Service
  product-service:
    build:
      context: .
      dockerfile: product_service/Dockerfile
    container_name: product-service
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: 123postgres
      DB_NAME: product_service
      DB_SSLMODE: disable
      CONSUL_ADDR: consul:8500
    depends_on:
      postgres:
        condition: service_healthy
      consul:
        condition: service_started
    networks:
      - ecom-network
    restart: on-failure

  # Order Service
  order-service:
    build:
      context: .
      dockerfile: order_service/Dockerfile
    container_name: order-service
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: 123postgres
      DB_NAME: order_service
      DB_SSLMODE: disable
      CONSUL_ADDR: consul:8500
      PRODUCT_SERVICE_ADDR: product-service:60051
    depends_on:
      postgres:
        condition: service_healthy
      consul:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - ecom-network
    restart: on-failure

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      CONSUL_ADDR: consul:8500
    depends_on:
      user-service:
        condition: service_started
      product-service:
        condition: service_started
      order-service:
        condition: service_started
    networks:
      - ecom-network

volumes:
  postgres_data:
  consul_data:

networks:
  ecom-network:
    driver: bridge
